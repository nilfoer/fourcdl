4chan x (user script/extension) is really useful (if not sorting the files my script isnt even needed)

to display 4ch fn with link and orig at end of file info without link:
Advanced -> File Info Formatting
%T %d (%p%s, %r%g) Orig: %N

even better -> display orig without link first and then at end of file info link with 4ch fn
%N %d (%p%s, %r%g) 4ch: %T

Link: %l (truncated), %L (untruncated), %T (4chan filename)
Filename: %n (truncated), %N (untruncated), %t (4chan filename)
Download button: %d
Quick filter MD5: %f
Spoiler indicator: %p
Size: %B (Bytes), %K (KB), %M (MB), %s (4chan default)
Resolution: %r (Displays 'PDF' for PDF files)
Tag: %g
Literal %: %%

___________________________________________________

 watch clip, on copy file url, do:
   a) print orig file name, backlinks recursively (only print! [we still might need backlinks]
      if they contain text other than quotelinks)
   b) copy orig file name, search backlinks recursively for src -> too hard? yes/probably
   c) copy orig fn and print backlinks that might be src -> currently printing direct backlinks and backlinks of a 2nd lvl if the first
       backlink contains keywords that show its a sauce request
   d) include dl -> specify folder name after pasting thread url -> copy file url -> display origfn, backlinks etc and enter new fn -> dl
	e) after url copy -> if next copy isnt a file url append it with _ to the filname -> dl or find intelligent way to paste into jDL
		-> paste into clipboard -> then manually into jd
		-> urls that just points to accs like twitter instagr tumblr etc -> isolate username
		-> save as txt as well or use log
	f) dl files with jDL -> save dled files posts with backlinks in txt file (name first fn 123789438.webm-123789455.webm or using date)
		-> less space than when saving whole html but still need to look src up and when copying file need to lookup and put into fn
	g) like e) but let jDL do the download and then rename the files
 CURRENT: doing c) considering adding f) but (logs are basically the same thing) and d) since we can check md5 after dl and jDL doesnt in combination with e) and 4chan x user script
 PLAN: dl with python check md5 after, use 4chan x to find src and do e) to automatically append copies after file urls that are not urls themselves to file name, additionally save posts with ALL? (sometimes src beyound 2nd lvl) backlinks as txt named with date or sth
 make sure while printing backlinks that its visible to which post theyre linked
 avoid spamming the console (with backlinks) when no src available or wanted
 check orig fn -> if it only contains a uid fn or 4chan fn without a name or e.g. JAV-ID (SDDE-456) dont copy/print it
 src might be:
   - http link
   - http link thats broken by spaces (some banned on 4ch or to counter bots)
   - name, with spaces, underscores, dashes or as one e.g. miamalkova
   - jav-id e.g. SDDE-456
 
___________________________________________________ 
sanitize windows filename:
keepcharacters = (' ','.','_')
"".join(c for c in filename if c.isalnum() or c in keepcharacters).rstrip()
___________________________________________________

# TODO above doesnt return dl_list so this is useless -> figure out way to properly save sate on exit
# crash here -> this one thread exported but reraised -> outer scope all previous threads will be exported
# but not this one since it hasnt been returned yet -> do everythin with thread dict using to_download val
# one main entry point that exports state on crash?
# or create custom exception and use state as exception info that gets appenden from scope to scope? if possible?
# or use global var?
        # not need if i have one var with a mutable type (dict) in main that/or sth thats 
        # contained inside it gets passed along to other funs and they just modify it
        # save that var on crash
# i dont rly need dl_list since im setting to_download and dl_filename in mutable dict thats contained inside thread dict
# export_state([(thread, dl_list)])
# instead of using raise UnexpectedCrash from e (gets rid of traceback) use with_traceback
raise UnexpectedCrash("process_4ch_thread", thread, "Unexpected crash while processing 4ch thread! Program state has been saved, start script with option resume to continue with old state!").with_traceback(e.__traceback__)

___________________________________________________

using filesize as keys to group files together to keep set sizes low when trying to check for duplicate dls?
-> good so sets dont become too large (less chance of collision), but reduce amount of diff sizes by using
   KB or MB and rounding

    set -> implemented as hash table:
    A hash table (with properly maintained load factor) has an average case of O(1), since the expected number of 
    operations needed to check if an element is in the list is constant, you just need to hash the element, access 
    the table at the desired place, check the bin, which contains all elements with the same hash value - but the 
    expected value of such elements is a constant that depends on the load factor1

    However, in the worst case, all the elements have the same hash values. This results that when needed to check if 
    an element is in the set, it requires to traverse the entire collection (which is in one bin), which is basically 
    a linear scan, and is O(n)

    Note: The above explains Separate Chaining hash tables, but the idea is similar for Open Addressing
    
    (1) If the load factor is 1/2 for example, it means the probability that no elements are in the desired address is 1/2. 
    The probability that (exactly) 1 element is in the bin is 1/4, the probability that exactly 2 elements in that bin, 
    is 1/8,.... 
    By summing the above, you get that the expected number of elements in the bin is 1/2 + 1/4 + 1/8 + ... <= 2
    ___________________________________________________
    
    set == dict with keys only
    Dict is O(1) for most operations, except for operations that touch all elements, such as iteration and copy (in which case, it's obviously O(n)).
    See: http://wiki.python.org/moin/TimeComplexity
    It has O(n) worst case, because you can always contrive a pathological example where all the keys have the same hash value.

___________________________________________________

i dont need to have 
try: 
    blabla 
except Exception: 
    raise
everywhere -> ONLY need
except Exception as e:
    # instead of using raise UnexpectedCrash from e (gets rid of traceback) use with_traceback
    raise UnexpectedCrash
in functions where i want to add information, even if exception happens in 
watch_clip_for_4ch_threads -> dl_multiple_threads -> download_thread -> download_4chan_file_url -> download_with_retries_crc
-> download
i can still catch it in download_thread (tested) where i need to add information by raising UnexpectedCrash for resume info

remove all empty reraises where no info gets added and used assert(False) in download to trigger exception
-> UnexpectedCrash was raised correctly -> resume also worked without errors

another case where we need it is:
try:
    while True:
        tmp_value = pyperclip.paste()
        if tmp_value != recent:
            return tmp_value
        time.sleep(0.1)
except KeyboardInterrupt:
    raise # reraise exception and handle it in outer scope 
---> OUTER SCOPE:
try:
    recent_value = get_new_clipboard(recent_value)
except KeyboardInterrupt:
    handle it...

we technically only need it in outer scope, since the exception can be caught/excepted at any point in the callstack 
but if we call it from a function that doesnt catch the KeyboardInterrupt then the whole program crashes when we
Ctrl-C since thats the only way to get out of that while True: (without copying new val to clip)
but we could also remove the reraise and except KeyboardInterrupt in outer scope and do this:
except KeyboardInterrupt:
    return None
---> OUTER SCOPE:
recent_value = get_new_clipboard(recent_value)
if recent_value is None:
    handle it...

which is cleaner!!

___________________________________________________    

import os

print("Path at terminal when executing this file")
print(os.getcwd() + "\n")

print("This file path, relative to os.getcwd()")
print(__file__ + "\n")

print("This file full path (following symlinks)")
full_path = os.path.realpath(__file__)
print(full_path + "\n")

print("This file directory and name")
path, filename = os.path.split(full_path)
print(path + ' --> ' + filename + "\n")

print("This file directory only")
os.path.dirname(os.path.realpath(__file__))

___________________________________________________

when iterating over dict use for k, v in d.items() instead of:
for k in d:
    v = d[k]
since for the latter one k needs to be hashed to access the value that k points to
-> large dict esp. bad

when iterating over d.keys() instead of for key in d -> u can mutate the dict ure iterating over since .keys() gets keys and makes a copy of it

___________________________________________________

OOP vs data-oriented

hier eigentlich als versuch verwendet data-oriented zu programmieren, dadurch und vor allem auch weil python
hierfuer nicht die notwendigen instrumente bietet viel komplizierter/unuebersichtlicher etc. und damit
wahrscheinlich auch qualitativ schlechter und weniger performant(<- das eher nicht, vllt sogar gegenteil) geworden
-> waere vllt gegangen, wenn ich statt dicts C-struct-like classes benutzt haette also Klassen die einfach nur
attribute haben:
# C-struct-like structure in python using dictionaries(wont return error when setting on wrong key), namedtuple(but its immutable, as in you cant do this Player(x=10,y=0) Player.x += 1 or a class
# class Bunch:
# ...     def __init__(self, **kwds):
# ...         self.__dict__.update(kwds)
# ...
# >>> mystruct = Bunch(field1=value1, field2=value2)
# or using __slots__ for less memory overhead and faster attribute access
# (must inherit from object, and all inherting classes must declare __slots__ and cant have __dict__ entry)
# class AB(object):
#     __slots__ = ('a', 'b')
# test = AB(); test.a = 1
# but then test = AB(0,1) isnt possible NO it is possible if you define an __init__ function
# >>> class AB(object):
# ...     __slots__ = ("a", "b")
# ...     def __init__(self, a, b):
# ...             self.a = a
# ...             self.b = b
# ...
# >>> test1 = AB(5,9)
# >>> test1.a
# 5
-> mit diesem Konstrukt/Datentyp waere 4chdl zu schreiben deutlich einfacher gewesen und mind. genau so performant
wenn nicht sogar schneller, da (wir verwenden ja z.zT. dicts fuer alles fuer das man sonst structs verwenden wuerde
__slots__ performanter ist

schlussfolgernd:
1. fuer projekte, die entweder nicht so viel wert auf performance legen oder fuer die einfache erweiterbarkeit (z.B. auch durch dritte)
wichtig ist -> OOP besser als data-oriented
2. sprachen, so verwenden wie sie konzipiert/für sachen verwenden fuer die sie optimiert wurden bzw. es muss nicht
unbedingt das ziel/beabsichtigt gewesen sein, dass die sprache sich gut fuer etwas verwenden laesst
z.B. C++ eigtl. fuer OOP, aber trotzdem sehr gut fuer data-oriented (wie Casey und Jonathan Blow sie benutzen;
sie benutzen z.B. [oder habs zumindest nicht gesehen] auch nicht die Moeglichkeit functions mit in structs
zu packen und dann wie bei Class-methods Structname struct1; struct1.play() aufrufen zu koennen
sie benutzen immer play(struct1) usw. -> sonst waer ihr argmuent das OOP -> zu viele function calls etc. unsinnig
da mit struct1.play() die function ja wieder bei jedem einzelnen struct aufgerufen wird und dann gleich viele function
calls vorliegen wuerden wie bei OOP mit Klassen
=> structs wie jblow und casey sie benutzen -> Datentyp, der aus mehreren anderen Datentypen besteht -> diese sind
dann mit vorher festgelegtem Variablennamen mit struct1.foo etc. (wie Attribute bei Klassen) zugaenglich (structs
koennen auch geschachtelt werden z.B. struct Player enhaelt struct Position etc.)
-> aehnlich wie in Python Klassen ohne Methoden zu verwenden, einfach nur um die Attribute nutzen zu koennen
und verschiedene Attribute in einem benannten Objekt speichern zu koennen z.B. 4chanThread der wiederum Posts im
Attribut 4chanThread.postlist oder so enhaelt
-> d.h. es geht vllt doch (gegensaetzlich zu dem was unterhalb steht) in python data-oriented programmieren zu wollen, 
aber trotzdem muss man besondere Konstruke benutzen und Feature vermeiden/umgehen, damit es moeglich wird, also eher
suboptimal (obwohl es sich ja bei python doppelt lohnen muesste, da function calls in python ja so teuer sind)
(-> unsinnig in python data-oriented programmieren zu wollen)
(deshalb 4chdl und tsu-info unnoetig verkompliziert)
___________________________________________________

Allowed chars in base64:
If you have a proper encoder for Base64, you will not see special characters except:

[A-Z][a-z][0-9][+/] and the padding char '=' at the end to indicate the number of zero fill bytes
___________________________________________________

"==" at the end of every md5 base64 string:
A note on the padding:

I mentioned above that many Base64 encoding algorithms add a couple of characters of padding when encoding an MD5 value. 
This is because Base64 represents 3 bytes of information as 4 characters. Since MD5 has 16 bytes of information, many 
Base64 encoding algorithms append "==" to designate that the input of 16 bytes was 2 bytes short of the next multiple of 3, 
which would have been 18 bytes. These 2 equal signs add no information whatsoever to the string, and can be discarded when 
storing.

___________________________________________________

to activate a link to search by md5 base64 on desuarchive.org/ with 4chan-x
remove the "#" in front of the line https://desuarchive.org/_/search/image/%sMD5/
in Sauce settings

%MD5: MD5 hash in base64.
%sMD5: MD5 hash in base64 using - and _.
(-> uses - for + and _ for /)

if this wasnt in 4chan-x id have used the 4chandl companion addon to insert a link into the file info div

___________________________________________________

Mozilla Extension to Native App Comm:

!!ATTENTION!! the example for native messaging by mozilla uses python2
example using py3: https://github.com/mdn/webextensions-examples/tree/master/native-messaging
(also in example_src_code folder)

extension_comm_manifest.json -> native app info
path: path to called native app
allowed_extensions: extensions (== extension id) that may call this native app

in Registry add:
HKEY_CURRENT_USER\SOFTWARE\Mozilla\NativeMessagingHosts\{native app name}
value = path to native app manifest.json
so that Firefox knows which native apps are calleable etc.

extension\manifest.json
info of the extension itself
app->id: id of application used to make it be able to call the native app

having extension...bat call a separate runner file so we can have extension_comm in sep folder
and still able to include fourchandl.gen_downloaded_files_info

___________________________________________________